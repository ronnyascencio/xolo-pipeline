{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Xolo Pipeline","text":"<p>Xolo Pipeline is a lightweight, modular, and cross-platform pipeline framework built in Python and powered by <code>uv</code>. It\u2019s tailored for freelancers, solo artists, and small studios working in VFX, animation, and digital content creation.</p>"},{"location":"index.html#key-features","title":"\u2728 Key Features","text":"<ul> <li>\u2705 Cross-platform (Linux, Windows, macOS)</li> <li>\ud83d\udd0c Modular CLI with Typer</li> <li>\u2601\ufe0f Works with local disks, cloud-sync folders (Dropbox, Drive), or NAS</li> <li>\ud83e\uddea Requires no global Python \u2014 just <code>uv</code></li> </ul>"},{"location":"index.html#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":"<ul> <li>Getting Started</li> <li>CLI Commands (coming soon)</li> <li>DCC Integrations (Maya, Blender, Nuke) \u2014 in progress</li> <li>Contributing Guide (planned)</li> </ul>"},{"location":"index.html#status","title":"\ud83d\udce6 Status","text":"<ul> <li>Alpha <code>v0.0.1</code> </li> <li>Open source under MIT License  </li> <li>Actively in development \u2014 see GitHub Project</li> </ul>"},{"location":"getting-started.html","title":"\ud83d\ude80 Getting Started with Xolo Pipeline","text":"<p>This guide helps you set up and run your first project using Xolo Pipeline.</p> <p>\ud83e\udde0 Philosophy</p> <pre><code>Minimal setup and infrastructure\n\nNo database, no web server required\n\nModular and extensible for future tools and integrations\n</code></pre> <p>Need Help?</p> <p>Feel free to open an Issue or start a Discussion.</p>"},{"location":"tutorial/commands.html","title":"Core Module","text":""},{"location":"tutorial/commands.html#config-commands","title":"Config Commands","text":""},{"location":"tutorial/commands.html#xolo.core.config.set_roots","title":"<code>set_roots(projects, assets)</code>","text":"<p>Set roots path for projects and  global assets folders create environment variable PROJECTS and GLOBAL_ASSETS</p> Source code in <code>xolo/core/config.py</code> <pre><code>@app.command()\ndef set_roots(projects: Path, assets: Path):\n    \"\"\"\n    Set roots path for projects and  global assets folders create environment variable PROJECTS and GLOBAL_ASSETS\n    \"\"\"\n    project_root = projects\n    assets_root = assets\n    config_data = {\"PROJECTS\": str(project_root), \"GLOBAL_ASSETS\": str(assets_root)}\n    config_path = Path(__file__).resolve().parent.parent.parent / \"config.yaml\"\n    with config_path.open(\"w\") as f:\n        yaml.dump(config_data, f, default_flow_style=False)\n    typer.echo(f\"Path saved to config.yaml: {project_root}\")\n\n    if config_path.exists():\n        with config_path.open(\"r\") as f:\n            config = yaml.safe_load(f)\n        projects_path = Path(config[\"PROJECTS\"])\n        assets_path = Path(config[\"GLOBAL_ASSETS\"])\n        os.environ[\"PROJECTS\"] = str(projects_path)\n        os.environ[\"GLOBAL_ASSETS\"] = str(assets_path)\n        projects_env = os.getenv(\"PROJECTS\")\n        global_assets_env = os.getenv(\"GLOBAL_ASSETS\")\n        print(f\"PROJECTS env: {projects_env}\")\n        print(f\"Global Assets env: {global_assets_env}\")\n    else:\n        typer.echo(\"Environment variable PROJECTS and GLOBAL_ASSETS not set\", fg=typer.colors.RED)\n</code></pre>"},{"location":"tutorial/commands.html#xolo.core.config.update_roots","title":"<code>update_roots(path)</code>","text":"<p>update root path for projects and global assets  and create environment variable PROJECTS</p> Source code in <code>xolo/core/config.py</code> <pre><code>@app.command()\ndef update_roots(path: Path):\n    \"\"\"\n    update root path for projects and global assets  and create environment variable PROJECTS\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"tutorial/commands.html#project-commands","title":"Project Commands","text":"<p>Project accept need to received tow-paths  - <code>PROJECTS</code> path</p> <ul> <li><code>GLOBAL_ASSETS</code> path</li> </ul> <p>This is usefully to letter on get those paths for asset management and load projects in to the DCC's</p>"},{"location":"tutorial/commands.html#xolo.core.project.create_project","title":"<code>create_project(project_name)</code>","text":"<p>create project, set root path for project and environment variable PROJECT_ROOT create project confing.json for data structure: folder creation in PROJECT_ROOT /assets /shots /published /review /delivery /renders data: resolution: str \"HD, 4K etc\" fps: int \"24, 23 etc\"</p> <p>project config.json should be created in PROJECT_ROOT folder</p> Source code in <code>xolo/core/project.py</code> <pre><code>@app.command()\ndef create_project(project_name: str):\n    \"\"\"\n    create project, set root path for project and environment variable PROJECT_ROOT\n    create project confing.json for data\n    structure: folder creation in PROJECT_ROOT\n    /assets\n    /shots\n    /published\n    /review\n    /delivery\n    /renders\n    data:\n    resolution: str \"HD, 4K etc\"\n    fps: int \"24, 23 etc\"\n\n\n    project config.json should be created in PROJECT_ROOT folder\n    \"\"\"\n    config_path = Path(__file__).resolve().parent.parent.parent / \"config.yaml\"\n\n    if config_path.exists():\n        with config_path.open(\"r\") as f:\n            config = yaml.safe_load(f)\n        root_path = Path(config[\"PROJECTS\"])\n        structure = FolderStructure()\n        for _, rel_path in track(structure.model_dump().items(), description=\"Creating project\"):\n\n            folder_path = root_path / project_name / rel_path.lstrip(\"/\")\n            folder_path.mkdir(parents=True, exist_ok=True)\n            print(f\"\ud83d\udcc1 Created: {folder_path}\")\n\n    else:\n        typer.secho(\"config file not found\", fg=typer.colors.RED)\n</code></pre>"},{"location":"tutorial/commands.html#xolo.core.project.delete_project","title":"<code>delete_project()</code>","text":"<p>delete project, content and environments :return:</p> Source code in <code>xolo/core/project.py</code> <pre><code>@app.command()\ndef delete_project():\n    \"\"\"\n    delete project, content and environments\n    :return:\n    \"\"\"\n    pass\n</code></pre>"},{"location":"tutorial/commands.html#xolo.core.project.import_media","title":"<code>import_media()</code>","text":"<p>import media and assets plates, assets, resources</p> <p>:return:</p> Source code in <code>xolo/core/project.py</code> <pre><code>@app.command()\ndef import_media():\n    \"\"\"\n    import media and assets\n    plates, assets, resources\n\n    :return:\n    \"\"\"\n    pass\n</code></pre>"},{"location":"tutorial/commands.html#models","title":"Models","text":""},{"location":"tutorial/commands.html#xolo.core.models.FolderStructure","title":"<code>FolderStructure</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>folder structure that will be created in the base path of the PROJECTS_ROOT</p> Source code in <code>xolo/core/models.py</code> <pre><code>class FolderStructure(BaseModel):\n    \"\"\"\n    folder structure that will be created in the base path of the PROJECTS_ROOT\n    \"\"\"\n    assets: str = \"/assets\"\n    shots: str = \"/shots\"\n    renders: str = \"/renders\"\n    editorial: str = \"/editorial\"\n    reviews: str = \"/reviews\"\n    delivery: str = \"/delivery\"\n    published: str = \"/published\"\n</code></pre>"},{"location":"tutorial/commands.html#xolo.core.models.ProjectData","title":"<code>ProjectData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata for the project config file</p> Source code in <code>xolo/core/models.py</code> <pre><code>class ProjectData(BaseModel):\n    \"\"\"\n    Metadata for the project config file\n    \"\"\"\n    name: str\n    resolution: str\n    fps: str\n</code></pre>"},{"location":"tutorial/installation.html","title":"Installation","text":""},{"location":"tutorial/installation.html#installation","title":"\ud83d\udce5 Installation","text":"<p>The installation process is really simple, just requiere one tool to be installed first </p> <ul> <li><code>uv</code>  Follow the instructions form the documentation  it is really simple </li> <li><code>git</code></li> </ul> <p>once you installed successfully  you need to clone the repository or  download source code from the realise section in the repository <code>I recomend you to download the last one</code>.</p> <pre><code>git clone https://github.com/ronnyascencio/xolo-pipeline.git\ncd xolo-pipeline\nuv venv --python=python3.11\nsource .venv/bin/activate  # or .venv\\Scripts\\activate on Windows\nuv pip install -r requirements.txt\nuv sync\n\n</code></pre> <p>usually this need to be installed in a directory with full privilege: - Windows :<code>C:\\</code> - Linux: <code>/opt</code></p>"},{"location":"utils/load_config.html","title":"Core Module","text":""},{"location":"utils/load_config.html#loading-the-settings","title":"Loading the settings","text":"<p>in this module is usefull to extract the data we set  in the config.ymal  like the <code>PROJECTS</code> root and <code>GLOBAL_ASSETS</code> root at first</p> <p>module still in development...</p>"},{"location":"utils/load_config.html#xolo.utils.settings.load_config","title":"<code>load_config()</code>","text":"<p>This function loads the config file and returns it as a dictionary to use the Variables as a GLOBAL VARIABLES to use in other modules and launchers</p> Source code in <code>xolo/utils/settings.py</code> <pre><code>def load_config():\n\n    \"\"\"\n    This function loads the config file and returns it as a dictionary to\n    use the Variables as a GLOBAL VARIABLES to use in other modules and launchers\n\n    \"\"\"\n    config_path = Path(__file__).resolve().parent.parent.parent / \"config.yaml\"\n    with config_path.open(\"r\") as f:\n        return yaml.safe_load(f)\n</code></pre>"}]}